<?php
namespace UniPin;

require "./src/_HELPERS";

// Methods array
$_API_METHODS = [
    "flash" => [
        "heading" => "Flash (in-game topup)",
        "methods" => [
            [
                "method" => "\$_Game = UniPin\Games::GetList();",
                "description" => "GetList method can be use to get list of all available games with game_code, description, image and denominations",
            ],
            [
                "method" => "\$_Game = UniPin\Games::GetDetail(\$_GameCode, \$_GameCode_description);",
                "description" => "GetDetail method can be use to get detail of one game calling with \$_GameCode",
            ],
            [
                "method" => "\$_User = UniPin\Games::UserValidate(\$_GameCode, \$_Fields);",
                "description" => "UserValidate method can be use to validate player id with game providers to check if account is valid and active.\n      Where \$_Fields are dynamic and different for different games",
            ],
            [
                "method" => "\$_Order = UniPin\Games::OrderCreate(\$_GameCode, \$_UserValidationToken, \$_TransactionID, \$_GameDenominationIdSelected);",
                "description" => "OrderCreate method can be use to create an order on final stage of topup credit along with calling other methods prior to this as in topup process",
            ],
            [
                "method" => "\$_Order = UniPin\Games::OrderIquiry(\$_TransactionID);",
                "description" => "OrderIquiry method is required to check and confirm status of order created by passing transaction id used in creating an order",
            ],
            [
                "method" => "\$_GameTopUp = UniPin\Games::GameTopUp( \$_GameCode, \$_TransactionID, \$_GameDenominationIdSelected, \$_UserFields);",
                "description" => "GameTopUp is complete method including UserValidate and OrderCreate (all-in-one process)",
            ],
        ],
    ],
    "vouchers" => [
        "heading" => "Vouchers",
        "methods" => [
            [
                "method" => "\$vouchers = UniPin\Vouchers::GetList();",
                "description" => "GetList method can be use to get list of all available vouchers",
            ],
            [
                "method" => "\$Voucher = UniPin\Vouchers::GetDetail(\$_VoucherCode);",
                "description" => "GetDetail method can be use to get denominations of a voucher by passing \$_VoucherCode",
            ],
            [
                "method" => "\$_Voucher = UniPin\Vouchers::Balance();",
                "description" => "Balance method can be use to check merchant balance of credits available to generate voucher",
            ],
            [
                "method" => "\$_Voucher = UniPin\Vouchers::Request( \$_DenominationCode, \$_Quantity, \$_ReferenceNo, \$_Remark, \$_Expired_At);",
                "description" => "Request method can be use to request generate a voucher by passing all required parameters",
            ],
            [
                "method" => "\$_VoucherInquiry = UniPin\Vouchers::Inquiry(\$_ReferenceNo);",
                "description" => "Inquiry method can be use to check status of voucher generated by passing \$_ReferenceNo",
            ],
        ],
    ],
    "unibox" => [
        "heading" => "Unibox",
        "methods" => [
            [
                "method" => "\$_UniBox = UniPin\UniBox::Launch(\n         \$__MANDATORY__ReferenceId,\n         \$__MANDATORY__URL_CallBack,\n         \$__MANDATORY__Currency,\n         \$__MANDATORY__Denominations,\n         \$__OPTIONAL__URL_Return,\n         \$__OPTIONAL__PaymentChannel,\n         \$__OPTIONAL__Remarks,\n         \$__OPTIONAL__IsMobileGame\n   );",
                "description" => "UniBox Launch method can be use to launch unibox window where user can make payment",
            ],
            [
                "method" => "\$_UniBox = UniPin\UniBox::Inquiry( \$__MANDATORY__ReferenceId);",
                "description" => "Inquiry can be use to check transaction created",
            ],
        ],
    ],
];

if(isset($argv)){
    if(isset($argv[1])){

        $argv[1] = strtolower($argv[1]);
        if($argv[1] == ""){
            ERROR::CLI_ERROR(3);
        }
        elseif($argv[1] != "-f" && $argv[1] != "-v" && $argv[1] != "-u"){
            ERROR::CLI_ERROR(3);
        }

        $_EXAMPLE_TEXT = ERROR::CLI_GET_MESSAGE("Allowed Methods:", "HEADING");

        $_VAR_1 = strtolower($argv[1]);
        $_VAR_2 = strtolower($argv[2]);
        $_VAR_3 = strtolower($argv[3]);

        $_F = ($_VAR_1 == '-f' || $_VAR_2 == '-f' || $_VAR_3 == '-f');
        $_V = ($_VAR_1 == '-v' || $_VAR_2 == '-v' || $_VAR_3 == '-v');
        $_U = ($_VAR_1 == '-u' || $_VAR_2 == '-u' || $_VAR_3 == '-u');

        if($_F){
            $_EXAMPLE_TEXT .= GET_SAMPLES("flash");
        }
        if($_V){
            $_EXAMPLE_TEXT .= GET_SAMPLES("vouchers");
        }
        if($_U){
            $_EXAMPLE_TEXT .= GET_SAMPLES("unibox");
        }

        echo $_EXAMPLE_TEXT;

    }
    else {
        ERROR::CLI_ERROR(3);
    }
}

function GET_SAMPLES($_API_NAME){
    global $_API_METHODS;
    $_TEXT = "";
    $_TEXT .= ERROR::CLI_GET_MESSAGE($_API_METHODS[$_API_NAME]["heading"] . ":\n", "QUESTION");
    $_METHODS = $_API_METHODS[$_API_NAME]["methods"];
    foreach($_METHODS as $_M){
        $_TEXT .= ERROR::CLI_GET_MESSAGE("\n   " . $_M["method"] . "\n", "SUCCESS");
        $_TEXT .= ERROR::CLI_GET_MESSAGE("      " . $_M["description"] . ".\n", "NORMAL");
        $_TEXT .= "\n";
    }
    $_TEXT .= "\n";
    return $_TEXT;
}
